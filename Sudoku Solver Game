#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define N 9
#define MAX_USERS 10
#define MAX_USERNAME_LENGTH 20
#define MAX_PASSWORD_LENGTH 20

// Structure to store user information
typedef struct {
    char username[MAX_USERNAME_LENGTH];
    char password[MAX_PASSWORD_LENGTH];
} User;

// Function declarations
int authenticate(User users[], int numUsers, char username[], char password[]);
void addUser(User users[], int *numUsers, char username[], char password[]);
void printInstructions();
int checkMove(int grid[N][N], int sudokuGrid[N][N], int row, int col, int num);
int isSafe(int grid[N][N], int row, int col, int num);
void printGrid(int grid[N][N]);
void generateSudoku(int grid[N][N], int difficulty, int solutionGrid[N][N]);
int solveSudokuCell(int grid[N][N], int row, int col, int num);
int findEmptyCell(int grid[N][N], int *row, int *col);
void copyGrid(int src[N][N], int dest[N][N]);
void displayAnswer(int grid[N][N]);
int calculateEmptyCells(int grid[N][N]);
int filledCorrectly(int userGrid[N][N], int sudokuGrid[N][N]);

int main() {
    
    User users[MAX_USERS];
    int numUsers = 0;

    
    int sudokuGrid[N][N] = {0};
    int userGrid[N][N] = {0};
    int solutionGrid[N][N] = {0};

   
    int difficulty;

   
    while (1) {

        printf("\nMain Menu:\n");
        printf("1. Log in\n");
        printf("2. Register\n");
        printf("3. Exit\n");
        printf("Select an option (1-3): ");

        int option;
        scanf("%d", &option);

        switch (option) {
            case 1: {
               
                char username[MAX_USERNAME_LENGTH];
                char password[MAX_PASSWORD_LENGTH];

                printf("Enter your username: ");
                scanf("%s", username);

                printf("Enter your password: ");
                scanf("%s", password);

              
                int isAuthenticated = authenticate(users, numUsers, username, password);

                if (isAuthenticated) {
                    printf("Authentication successful. Welcome, %s!\n", username);

                   
                    printInstructions();

                    
                    printf("Choose difficulty level (1: Easy, 2: Medium, 3: Hard): ");
                    scanf("%d", &difficulty);

                    
                    generateSudoku(sudokuGrid, difficulty, solutionGrid);
                    copyGrid(sudokuGrid, userGrid);

                   
                    printf("Sudoku Puzzle:\n");
                    printGrid(userGrid);

                    int puzzleSolved = 0;
                    int moves = 0;
                    int emptyCells = calculateEmptyCells(userGrid);
                    int maxMoves = emptyCells + 10;

                    // Game loop
                    while (!puzzleSolved && moves < maxMoves) {
                        int row, col, num;
                        printf("Enter move (row column number): ");

                        if (scanf("%d %d %d", &row, &col, &num) != 3) {
                            // Invalid input format
                            printf("Invalid input format! Try again.\n");
                            while (getchar() != '\n'); 
                            continue;
                        }

                        moves++;
                        printf("You have %d moves\n", (maxMoves - moves));

                        if (checkMove(userGrid, sudokuGrid, row - 1, col - 1, num)) {
                            if (solveSudokuCell(userGrid, row - 1, col - 1, num)) {
                                printf("\n");
                                printGrid(userGrid);

                                printf("\nCorrect move \n");
                            } else {
                                printf("\nIncorrect move! Try again.\n");
                            }
                        } else {
                            printf("\nIncorrect move! Try again.\n");
                        }

                        if (calculateEmptyCells(userGrid) == 0) {
                            if (filledCorrectly(userGrid, solutionGrid)) {
                                printf("\nCongratulations! Sudoku solved.\n");
                                puzzleSolved = 1;
                                break;
                            }
                        } else if (moves >= maxMoves) {
                            printf("\nChances are over! Game over.\n");
                            printf("The correct solution is:\n");
                            displayAnswer(solutionGrid);
                            break;
                        }
                    }
                    break; 
                } else {
                    printf("Authentication failed. Try again...\n");
                }
                break; 

            }
            case 2: {
                // Register
                char newUsername[MAX_USERNAME_LENGTH];
                char newPassword[MAX_PASSWORD_LENGTH];

                printf("Enter a new username: ");
                scanf("%s", newUsername);

                printf("Enter a new password: ");
                scanf("%s", newPassword);

                // Add the new user to the database
                addUser(users, &numUsers, newUsername, newPassword);
                break; // Break from the switch statement after registration

            }
            case 3:
                // Exit
                printf("Exiting...\n");
                return 0;
            default:
                // Invalid option
                printf("Invalid option. Try again...\n");
        }
    }

    return 0;
}

void printInstructions() {
    printf("Rules:\n");
    printf("1. Enter your move in the format 'row column number'.\n");
    printf("2. Each row, column, and 3x3 square must contain unique numbers from 1 to 9.\n");
    printf("3. You have a limited number of moves to solve the puzzle.\n");
    printf("Let's get started!\n\n");
}

int authenticate(User users[], int numUsers, char username[], char password[]) {
    for (int i = 0; i < numUsers; i++) {
        if (strcmp(users[i].username, username) == 0 && strcmp(users[i].password, password) == 0) {
            return 1; // Authentication successful
        }
    }
    return 0; 
}

void addUser(User users[], int *numUsers, char username[], char password[]) {
    if (*numUsers < MAX_USERS) {
        strcpy(users[*numUsers].username, username);
        strcpy(users[*numUsers].password, password);
        (*numUsers)++;
        printf("User '%s' added successfully.\n", username);
    } else {
        printf("Maximum number of users reached. Cannot add more users.\n");
    }
}

int checkMove(int grid[N][N], int sudokuGrid[N][N], int row, int col, int num) {
    if (row < 0 || row >= N || col < 0 || col >= N || num < 1 || num > N) {
        return 0; // Invalid move
    }

    if (sudokuGrid[row][col] == 0) {
        return isSafe(grid, row, col, num);
    }

    return 0; // Cell is fixed in the original Sudoku grid
}

int isSafe(int grid[N][N], int row, int col, int num) {
    for (int x = 0; x < N; x++)
        if (grid[row][x] == num || grid[x][col] == num)
            return 0;

    int startRow = row - row % 3, startCol = col - col % 3;
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (grid[i + startRow][j + startCol] == num)
                return 0;

    return 1;
}

void printGrid(int grid[N][N]) {
    printf("   1 2 3   4 5 6   7 8 9\n");
    printf(" +-------+-------+-------+\n");
    for (int i = 0; i < N; i++) {
        if (i > 0 && i % 3 == 0) {
            printf("|-------|-------|-------|\n");
        }
        printf("%d| ", i + 1);
        for (int j = 0; j < N; j++) {
            if (j > 0 && j % 3 == 0) {
                printf("| ");
            }
            if (grid[i][j] == 0) {
                printf(". ");
            } else {
                printf("%d ", grid[i][j]);
            }
            if (j == N - 1) {
                printf("|");
            }
        }
        printf("\n");
    }
    printf(" +-------+-------+-------+\n");
}

void generateSudoku(int grid[N][N], int difficulty, int solutionGrid[N][N]) {
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            grid[i][j] = 0;

    solveSudoku(grid);

    copyGrid(grid, solutionGrid);

    int cellsToKeep = N * N * (difficulty == 1 ? 0.3 : (difficulty == 2 ? 0.2 : 0.1));

    while (cellsToKeep > 0) {
        int i = rand() % N;
        int j = rand() % N;
        if (grid[i][j] != 0) {
            grid[i][j] = 0;
            cellsToKeep--;
        }
    }
}

int solveSudoku(int grid[N][N]) {
    int row, col;

    if (!findEmptyCell(grid, &row, &col))
        return 1;

    for (int num = 1; num <= N; num++) {
        if (isSafe(grid, row, col, num)) {
            grid[row][col] = num;

            if (solveSudoku(grid))
                return 1;

            grid[row][col] = 0;
        }
    }

    return 0;
}

int findEmptyCell(int grid[N][N], int *row, int *col) {
    for (*row = 0; *row < N; (*row)++)
        for (*col = 0; *col < N; (*col)++)
            if (grid[*row][*col] == 0)
                return 1;

    return 0;
}

void copyGrid(int src[N][N], int dest[N][N]) {
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            dest[i][j] = src[i][j];
}

void displayAnswer(int grid[N][N]) {
    int solutionGrid[N][N];
    copyGrid(grid, solutionGrid);

    if (solveSudoku(solutionGrid)) {
        printf("Sudoku Solution:\n");
        printGrid(solutionGrid);
    } else {
        printf("No solution exists for the given Sudoku.\n");
    }
}

int solveSudokuCell(int grid[N][N], int row, int col, int num) {
    if (isSafe(grid, row, col, num)) {
        grid[row][col] = num;
        return 1;
    }

    return 0;
}

int calculateEmptyCells(int grid[N][N]) {
    int emptyCells = 0;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (grid[i][j] == 0) {
                emptyCells++;
            }
        }
    }
    return emptyCells;
}

int filledCorrectly(int userGrid[N][N], int sudokuGrid[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (userGrid[i][j] != sudokuGrid[i][j]) {
                return 0;
            }
        }
    }
    return 1;
}

